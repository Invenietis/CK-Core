<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivityLoggerBoundClientMultipleRegister" xml:space="preserve">
    <value>A '{0}' can be registered in only one IActivityLogger.Output at the same time. Unregister it before Registering it in another logger.</value>
  </data>
  <data name="ActivityLoggerConcurrentThreadAccess" xml:space="preserve">
    <value>Concurrent accesses from 2 threads to the same ActivityLogger has been detected. Only one thread at a time can interact with an ActivityLogger.</value>
  </data>
  <data name="ActivityLoggerErrorWhileGetConclusionText" xml:space="preserve">
    <value>Unexpected error while getting conclusion text: '{0}'.</value>
  </data>
  <data name="ActivityLoggerReentrancyError" xml:space="preserve">
    <value>A reentrant call in an ActivityLogger has been detected. A logger usage must not trigger another operation on the same logger.</value>
  </data>
  <data name="ActivityLoggerReentrancyReleaseError" xml:space="preserve">
    <value>Internal error: Error during release reentrancy operation. Thread id={0} entered whereas release is called from thread '{1}', id={2}.</value>
  </data>
  <data name="ArgumentCountNegative" xml:space="preserve">
    <value>Argument count can not be negative.</value>
  </data>
  <data name="ArgumentMustNotBeNullOrWhiteSpace" xml:space="preserve">
    <value>Argument must not be null or whitespace.</value>
  </data>
  <data name="CanNotUnregisterDefaultClient" xml:space="preserve">
    <value>Can not Unregister the Tap, PathCatcher or ErrorCounter of a default logger.</value>
  </data>
  <data name="ClosedByBridgeRemoved" xml:space="preserve">
    <value>Prematurely closed by Bridge removed.</value>
  </data>
  <data name="DateTimeMustBeUtc" xml:space="preserve">
    <value>DateTime must be Utc. Use DateTime.UtcNow to obtain it for instance.</value>
  </data>
  <data name="DirectServicesCanNotBeDisabled" xml:space="preserve">
    <value>Service {0} is direcly supported by the container. It can not be disabled.</value>
  </data>
  <data name="ErrorWhileCollectorRaiseError" xml:space="preserve">
    <value>An error handler raised the error. It has been removed from the CriticalErrorCollector.OnErrorFromBackgroundThreads event.</value>
  </data>
  <data name="ExceptionWhileResolvingType" xml:space="preserve">
    <value>An exception occured while resolving type: {0}.</value>
  </data>
  <data name="ExpectedXmlAttribute" xml:space="preserve">
    <value>Expected attribute '{0}'.</value>
  </data>
  <data name="ExpectedXmlEndElement" xml:space="preserve">
    <value>Expected EndElement token named {0}.</value>
  </data>
  <data name="FIFOBufferEmpty" xml:space="preserve">
    <value>FIFOBuffer is empty.</value>
  </data>
  <data name="InvalidAssemblyQualifiedName" xml:space="preserve">
    <value>"{0}" is not a valid assembly qualified name.</value>
  </data>
  <data name="PossibleWrongOverloadUseWithException" xml:space="preserve">
    <value>Possible use of the wrong overload: Use the form that takes a first parameter of type Exception and then the string text instead of this ( string format, object arg0, ... ) method to log the exception, or calls this overload explicitely with the Exception.Message string.</value>
  </data>
  <data name="ServiceAlreadyDirectlySupported" xml:space="preserve">
    <value>Service {0} is directly supported by the container.</value>
  </data>
  <data name="ServiceAlreadyRegistered" xml:space="preserve">
    <value>Service {0} is already registered by the container.</value>
  </data>
  <data name="ServiceImplCallbackTypeMismatch" xml:space="preserve">
    <value>Service {0} is not implemented by object {1} returned by the callback.</value>
  </data>
  <data name="ServiceImplTypeMismatch" xml:space="preserve">
    <value>Service {0} is not implemented by object {1}.</value>
  </data>
  <data name="TagMustBeRegisteredInActivityLogger" xml:space="preserve">
    <value>Must be not null and registered in ActivityLogger.RegisteredTags.</value>
  </data>
  <data name="TraitsMustBelongToTheSameContext" xml:space="preserve">
    <value>Traits must belong to the same context.</value>
  </data>
  <data name="UnregisteredServiceInServiceProvider" xml:space="preserve">
    <value>Unable to find service '{0}'.</value>
  </data>
</root>